@page

@{
    var name = "Lights Out ðŸ’¡";
    var description = "Switch off all the lights as fast as you can!";
}

<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>@name</title>
  <meta name="description" content="@description">
  <meta name="author" content="Adrian Vella">

  <meta property="og:title" content="@name">
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://lightsout.adrianvella.com">
  <meta property="og:description" content="@description">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  <style>
    .container {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translateX(-50%) translateY(-50%);
    }

    game .box {
        background-color: lightgrey;
        color: #fff;
        border-radius: 5px;
        padding: 20px;
        font-size: 150%;
    }

    game .wrapper {
        width: 60%;
        display: grid;
        grid-gap: 10px;
        grid-auto-flow: row;
    }

    game .wrapper .cell {
        cursor: pointer;
    }
  </style>
</head>

<body class="container">
    <h1 class="display-3">@name
        <br/>
        <small class="text-muted">@description</small>
    </h1>
    
    <br/>

    <div id="gameSelection" class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
            Game Mode
        </button>
        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1"></ul>
    </div>

    <br /><br />

    <button id="start" type="button" class="btn btn-outline-primary" onclick="startGame(this)">Start!</button>
    <button id="surrender" type="button" class="btn btn-outline-danger" hidden onclick="surrender(this)">Surrender ðŸ˜­</button>

    <br /><br />

    <game class="display-4"></game>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

    <script>
        window.onload = () =>
        {
            fetch("/api/gamesettings")
                .then(response => response.json())
                .then(data => {
                    if (!data.length) return;

                    const list = document.querySelector("#gameSelection ul");

                    const firstId = data[0].id;

                    for (const gameSetting of data)
                    {
                        const text = `${gameSetting.noOfRows} x ${gameSetting.noOfColumns} - Time Limit: ${gameSetting.gameMaxDuration}`;

                        const li = document.createElement("li");

                        const a = document.createElement("a");

                        a.classList.add("dropdown-item");

                        if (gameSetting.id === firstId) a.classList.add("active");

                        a.href = "#";

                        a.setAttribute("gameId", gameSetting.id);

                        a.appendChild(document.createTextNode(text));

                        li.appendChild(a);

                        list.appendChild(li);
                    }

                    for (const aTag of document.querySelectorAll("#gameSelection a"))
                    {
                        aTag.onclick = (e) =>
                        {
                            const thisGameId = e.currentTarget.getAttribute("gameId");

                            for(const a of document.querySelectorAll("#gameSelection a"))
                            {
                                if (a.getAttribute("gameId") !== thisGameId)
                                {
                                    a.classList.remove("active");
                                }
                            }

                            e.currentTarget.classList.add("active");
                        };
                    }
                });
        };

        const startGame = (btn) =>
        {
            btn.hidden = true;

            document.getElementById("surrender").hidden = false;
            document.getElementById("gameSelection").hidden = true;

            const gameId = document.querySelector("#gameSelection .active").getAttribute("gameId");

            fetch("/api/game/play/" + gameId)
                .then(response => {
                    if (response.status === 404)
                    {
                        game.prepend(
                            "Game Over! You took too long to complete the puzzle", 
                            document.createElement("br"),
                            document.createElement("br")
                        );

                        document.getElementById("start").hidden = true;
                        document.getElementById("surrender").hidden = false;
                        document.getElementById("gameSelection").hidden = true;

                        return;
                    }

                    const gameStateId = response.headers.get("x-gamestateid");

                    const game = document.getElementsByTagName("game")[0];

                    game.id = gameStateId;

                    return response.text();
                })
                .then(data => {

                    const game = document.getElementsByTagName("game")[0];

                    window.gameStartTime = new Date();
                    
                    game.innerHTML = data;
                    
                    game.prepend(
                        `Moves: 0`, 
                        document.createElement("br"),
                        `Started: ${window.gameStartTime.toLocaleString()}`,
                        document.createElement("br"),
                        document.createElement("br")
                    );

                    const gameWrapper = game.querySelector(".wrapper");

                    const rows = parseInt(gameWrapper.getAttribute("rows"));

                    const columns = parseInt(gameWrapper.getAttribute("columns"));

                    const rowSize = 100 / rows;

                    const columnsSize = 100 / columns;

                    gameWrapper.style.cssText = `grid-template-columns: repeat(${columns}, ${columnsSize}%);grid-template-rows: repeat(${rows}, ${rowSize}%);`;

                    for (const cell of document.querySelectorAll("game .wrapper .cell"))
                    {
                        cell.setAttribute("onclick","toggleCell(this);");
                    }
                });
        };

        const surrender = (btn) =>
        {
            btn.hidden = true;

            document.getElementById("start").hidden = false;
            document.getElementById("surrender").hidden = true;
            document.getElementById("gameSelection").hidden = false;

            const game = document.getElementsByTagName("game")[0];

            fetch(`/api/game/surrender/${game.id}`, { method: 'POST' })
                .then(response => response.text())
                .then(data => game.innerHTML = data);
        };

        const toggleCell = (cell) =>
        {
            const row = parseInt(cell.id.substring(1, 2));

            const column = parseInt(cell.id.substring(3, 4));

            const game = document.getElementsByTagName("game")[0];

            let remainingSeconds = undefined;
            let moveCount = undefined;
            let isSolved = false;

            fetch(
                    `/api/game/toggle/${game.id}`,
                    {
                        method: 'POST',
                        body: `{ "rowNumber": ${row}, "columnNumber": ${column} }`,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                    }
                )
                .then(response => {
                    if (response.status === 404)
                    {
                        game.prepend(
                            "Game Over! You took too long to complete the puzzle", 
                            document.createElement("br"),
                            document.createElement("br")
                        );
                        
                        document.getElementById("start").hidden = false;
                        document.getElementById("surrender").hidden = true;
                        document.getElementById("gameSelection").hidden = false;

                        return;
                    }

                    remainingSeconds = parseInt(response.headers.get("x-remainingtime"));

                    moveCount = parseInt(response.headers.get("x-movecount"));

                    isSolved = parseInt(response.headers.get("x-issolved")) === 1;
                    
                    return response.text();
                })
                .then(data => {
                    const gameWrapper = game.querySelector(".wrapper");

                    const styling = gameWrapper.style.cssText;
                    
                    game.innerHTML = data;

                    if (remainingSeconds === 0)
                    {
                        game.prepend(
                            "Game Over! You took too long to complete the puzzle", 
                            document.createElement("br"),
                            document.createElement("br")
                        );

                        document.getElementById("start").hidden = false;
                        document.getElementById("surrender").hidden = true;
                        document.getElementById("gameSelection").hidden = false;
                    }
                    else if (isSolved)
                    {
                        game.prepend(
                            "Puzzle Solved ðŸŽ‰", 
                            document.createElement("br"),
                            document.createElement("br")
                        );

                        document.getElementById("start").hidden = false;
                        document.getElementById("surrender").hidden = true;
                        document.getElementById("gameSelection").hidden = false;
                    }
                    else
                    {
                        game.prepend(
                            `Moves: ${moveCount}`, 
                            document.createElement("br"),
                            `Started: ${window.gameStartTime.toLocaleString()}`,
                            document.createElement("br"),
                            document.createElement("br")
                        );
                    }

                    document.querySelector("game .wrapper").style.cssText = styling;
                    
                    if (!isSolved && remainingSeconds > 0)
                    {
                        for (const cell of document.querySelectorAll("game .wrapper .cell"))
                        {
                            cell.setAttribute("onclick","toggleCell(this);");
                        }
                    }
                });
        };
    </script>
</body>
</html>
